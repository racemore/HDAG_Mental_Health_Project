# -*- coding: utf-8 -*-
"""HDAG_Depression_Anxiety_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L1rmqTmlooXK2OCRsW7bwC0_N1reh7aC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt

# Loads data
data_url = "https://data.cdc.gov/api/views/8pt5-q6wp/rows.csv?accessType=DOWNLOAD"
data = pd.read_csv(data_url)

'''
Notes for the HDAG project:

"Value" is the percentage of adults who report symptoms of anxiety or depression  

For this project, we will ignore the confidence interval and just use the value

The data includes weekly values over months --> do a few graphs on a certain demographic over time 
and then probably start averaging data for broad comparisons

In 2019, 8.1% of adults aged 18 and over had symptoms of anxiety disorder, 6.5% had symptoms of depressive disorder,
 and 10.8% had symptoms of anxiety disorder or depressive disorder. --> so everything is really high in comparison for this panedmic dataset
'''

# split into smaller datasets
dep_data = data[data["Indicator"] == "Symptoms of Depressive Disorder"]
anx_data = data[data["Indicator"] == "Symptoms of Anxiety Disorder"]

# function to calculate the mean percentage throughout entire time period for a specific subgroup

def find_subgroup_mean(data, subgroup_name):
  subset_data = data[data["Subgroup"] == subgroup_name]
  mean = round(subset_data["Value"].mean(), 2)
  return mean

data.iloc[:,3].unique()

# First figures: General Comparison between age groups for anxiety and depressive disorder
age_ranges = ['18 - 29 years', '30 - 39 years', '40 - 49 years','50 - 59 years', '60 - 69 years', '70 - 79 years', '80 years and above']

# Generate graph for depression
depression_by_age = []

for age in age_ranges:
  value = find_subgroup_mean(dep_data, age)
  # I sliced the age to make it easier to fit the name, sloppy
  depression_by_age.append([age[:8], value ])

depression_age_df = pd.DataFrame(depression_by_age,columns=['Age','Percentage'])

sns.barplot(x = "Age", y = "Percentage", data = depression_age_df, palette="mako").set_title("Depression Rates by Age")
plt.ylim(0, 50)
plt.show()

# Generate graph for anxiety
anxiety_by_age = []

for age in age_ranges:
  value = find_subgroup_mean(anx_data, age)
  anxiety_by_age.append([age[:8], value ])

anxiety_age_df = pd.DataFrame(anxiety_by_age,columns=['Age','Percentage'])

sns.barplot(x = "Age", y = "Percentage", data = anxiety_age_df, palette="rocket").set_title("Anxiety Rates by Age")
plt.ylim(0, 50)
plt.show()

# Second figures: General Comparison between sex for anxiety and depressive disorder

# Generate graphs for depression
depression_by_sex = []

depression_by_sex.append(["Male", find_subgroup_mean(dep_data, "Male")])
depression_by_sex.append(["Female", find_subgroup_mean(dep_data, "Female")])

depression_sex_df = pd.DataFrame(depression_by_sex,columns=['Sex','Percentage'])

sns.barplot(x = "Sex", y = "Percentage", data = depression_sex_df, palette="mako").set_title("Depression Rates by Sex")
plt.ylim(0, 50)
plt.show()


# Generate graphs for anxiety
anxiety_by_sex = []

anxiety_by_sex.append(["Male", find_subgroup_mean(anx_data, "Male")])
anxiety_by_sex.append(["Female", find_subgroup_mean(anx_data, "Female")])

anxiety_sex_df = pd.DataFrame(anxiety_by_sex,columns=['Sex','Percentage'])

sns.barplot(x = "Sex", y = "Percentage", data = anxiety_sex_df, palette="rocket").set_title("Anxiety Rates by Sex")
plt.ylim(0, 50)
plt.show()

# Third figures: General Comparison between education level for anxiety and depressive disorder
edu_ranges = ['Less than a high school diploma', 'High school diploma or GED',
       "Some college/Associate's degree", "Bachelor's degree or higher"]

# Generate graph for depression
depression_by_edu = []

for edu in edu_ranges:
  value = find_subgroup_mean(dep_data, edu)
  depression_by_edu.append([edu, value ])

depression_edu_df = pd.DataFrame(depression_by_edu,columns=['Education','Percentage'])
depression_edu_df["Education"] = ["< High School", "High School", "Associate's", "Bachelor's+"]

sns.barplot(x = "Education", y = "Percentage", data = depression_edu_df, palette="mako").set_title("Depression Rates by Education")
plt.ylim(0, 50)
plt.show()

# Generate graph for anxiety
anxiety_by_edu = []

for edu in edu_ranges:
  value = find_subgroup_mean(anx_data, edu)
  anxiety_by_edu.append([edu, value ])

anxiety_edu_df = pd.DataFrame(anxiety_by_edu,columns=['Education','Percentage'])
anxiety_edu_df["Education"] = ["< High School", "High School", "Associate's", "Bachelor's+"]

sns.barplot(x = "Education", y = "Percentage", data = anxiety_edu_df, palette="rocket").set_title("Anxiety Rates by Education")
plt.ylim(0, 50)
plt.show()

# Fourth figures: General Comparison between Race for anxiety and depressive disorder
race_ranges = ['Hispanic or Latino',
       'Non-Hispanic White, single race',
       'Non-Hispanic Black, single race',
       'Non-Hispanic Asian, single race']

# Generate graph for depression
depression_by_race = []

for race in race_ranges:
  value = find_subgroup_mean(dep_data, race)
  depression_by_race.append([race, value ])

depression_race_df = pd.DataFrame(depression_by_race,columns=['Race','Percentage'])
depression_race_df["Race"] = ['Hispanic or Latino',
       'White',
       'Black',
       'Asian']

sns.barplot(x = "Race", y = "Percentage", data = depression_race_df, palette="mako").set_title("Depression Rates by Race")
plt.ylim(0, 50)
plt.show()

# Generate graph for anxiety
anxiety_by_race = []

for race in race_ranges:
  value = find_subgroup_mean(anx_data, race)
  anxiety_by_race.append([race, value ])

anxiety_race_df = pd.DataFrame(anxiety_by_race,columns=['Race','Percentage'])
anxiety_race_df["Race"] = ['Hispanic or Latino',
       'White',
       'Black',
       'Asian']
sns.barplot(x = "Race", y = "Percentage", data = anxiety_race_df, palette="rocket").set_title("Anxiety Rates by Race")
plt.ylim(0, 50)
plt.show()



all_subgroups = ['18 - 29 years', '30 - 39 years', '40 - 49 years',
       '50 - 59 years', '60 - 69 years', '70 - 79 years',
       '80 years and above', 'Male', 'Female', 'Hispanic or Latino',
       'Non-Hispanic White, single race',
       'Non-Hispanic Black, single race',
       'Non-Hispanic Asian, single race',
       'Non-Hispanic, other races and multiple races',
       'Less than a high school diploma', 'High school diploma or GED',
       "Some college/Associate's degree", "Bachelor's degree or higher"]

depression_all = []
for sub in all_subgroups:
  value_dep = find_subgroup_mean(dep_data, sub)
  value_anx = find_subgroup_mean(anx_data, sub)

  depression_all.append([sub, value_dep, value_anx ])

depression_all_df = pd.DataFrame(depression_all,columns=['subgroup','Depression %', 'Anxiety %'])

depression_all_df

states = ["Alaska", "Alabama", "Arkansas", "Arizona", "California", "Colorado", 
       "Connecticut", "District of Columbia", "Delaware", "Florida", "Georgia",
       "Hawaii", "Iowa", "Idaho", "Illinois", "Indiana", "Kansas", "Kentucky",
       "Louisiana", "Massachusetts", "Maryland", "Maine", "Michigan",
       "Minnesota", "Missouri", "Mississippi", "Montana", "North Carolina",
       "North Dakota", "Nebraska", "New Hampshire", "New Jersey", "New Mexico",
       "Nevada", "New York", "Ohio", "Oklahoma", "Oregon", "Pennsylvania",
       "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas",
       "Utah", "Virginia", "Vermont", "Washington", "Wisconsin",
       "West Virginia", "Wyoming"]

data_by_state = []
for sub in states:
  value_dep = find_subgroup_mean(dep_data, sub)
  value_anx = find_subgroup_mean(anx_data, sub)

  data_by_state.append([sub, value_dep, value_anx ])

data_by_state_df = pd.DataFrame(data_by_state,columns=['subgroup','Depression %', 'Anxiety %'])
data_by_state_df.insert(0, 'id', range(1, 1 + len(data_by_state_df)))

data_by_state_df.head()
data_by_state_df

from vega_datasets import data

states = alt.topo_feature(data.us_10m.url, 'states')

alt.Chart(states).mark_geoshape().encode(
    color='Depression %:Q'
).transform_lookup(
    lookup='id',
    from_=alt.LookupData(data_by_state_df, 'id', list(data_by_state_df.columns))
).properties(
    width=500,
    height=300
).project(
    type='albersUsa'
)

alt.Chart(states).mark_geoshape().encode(
    color='Anxiety %:Q'
).transform_lookup(
    lookup='id',
    from_=alt.LookupData(data_by_state_df, 'id', list(data_by_state_df.columns))
).properties(
    width=500,
    height=300
).project(
    type='albersUsa'
)